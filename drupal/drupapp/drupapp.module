<?php

/**
 * @file
 * Drupapp main functions.
 */

/**
 * Implements hook_menu().
 */
function drupapp_menu() {
  $items = array();

  $items[variable_get('drupapp_endpoint', 'drupapp')] = array(
    'title' => 'Drupapp request',
    'page callback' => 'drupapp_request',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Experimental - use with care.
  $items[variable_get('drupapp_endpoint', 'drupapp') .'/glass'] = array(
    'title' => 'Glass post',
    'page callback' => 'drupapp_glass',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/media/drupapp'] = array(
    'title' => 'Drupapp',
    'description' => 'Configure the settings for Drupal application.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupapp_configuration'),
    'access arguments' => array('administer drupapp'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function drupapp_permission() {
  return array(
    'administer drupapp' => array(
      'title' => t('Administer drupapp'),
      'description' => t('Configure your drupapp settings')
    ),
    'upload images via app' => array(
      'title' => t('Upload images'),
      'description' => t('Give users the privilege to upload images from the application.')
    ),
  );
}

/**
 * Menu callback: configuration form.
 */
function drupapp_configuration($form, $form_state) {
  global $base_url;

  $form['drupapp_endpoint'] = array(
    '#title' => t('Endpoint'),
    '#description' => t('The end point URL for your request: @end_point.<br />The Glass endpoint is @glass_end_point.', array('@end_point' => $base_url . '/' . variable_get('drupapp_endpoint', 'drupapp'), '@glass_end_point' => $base_url . '/' . variable_get('drupapp_endpoint', 'drupapp') . '/glass')),
    '#type' => 'textfield',
    '#default_value' => variable_get('drupapp_endpoint', 'drupapp'),
  );

  $form['drupapp_glass_secret'] = array(
    '#title' => t('Glass secret'),
    '#description' => t('Create a secret for your Glass connection.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('drupapp_glass_secret', 'druglass'),
  );

  $options = array();
  $node_bundles = node_type_get_names();
  $instances = field_info_instances('node');
  foreach ($instances as $bundle => $fields) {
    foreach ($fields as $field_name => $field) {
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'image') {
        $options[$bundle . '|' . $field_name] = $node_bundles[$bundle] . ': ' . $field['label'];
      }
    }
  }
  $form['drupapp_image_field'] = array(
    '#title' => t('Image field'),
    '#required' => TRUE,
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('drupapp_image_field'),
  );

  $form['drupapp_status'] = array(
    '#title' => t('Publish immediately'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('drupapp_status'),
  );

  $form['drupapp_debug'] = array(
    '#title' => t('Log the $_POST & $_FILES variable to watchdog. Turn off in production.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('drupapp_debug'),
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'drupapp_configuration_submit';
  return $form;
}

/**
 * Submit callback after saving the configuration form.
 */
function drupapp_configuration_submit($form, $form_state) {
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Menu callback: do a drupapp request.
 */
function drupapp_request() {

  // Debug ?
  if (variable_get('drupapp_debug')) {
    watchdog('drupapp_debug_post', print_r($_POST, TRUE));
    watchdog('drupapp_debug_files', print_r($_FILES, TRUE));
  }

  // Determine request type.
  $request_type = drupapp_request_type();
  if (!$request_type) {
    drupapp_request_end(t('Invalid request type.'), FALSE);
  }

  // Delegate to separate function.
  $callback = 'drupapp_service_'  . $request_type;
  $result = $callback();
  drupapp_request_end($result['message'], $result['result']);
}

/**
 * Menu callback: do a drupapp request from Glass.
 *
 * Currently there's no feedback to glass.
 */
function drupapp_glass() {

  // Check the secret.
  $secret = variable_get('drupapp_glass_secret', 'druglass');
  $post_secret = isset($_POST['glass_secret']) ? $_POST['glass_secret'] : '';
  if ($secret != $post_secret) {
    return;
  }

  // Check the account.
  $account_name = isset($_POST['account_name']) ? $_POST['account_name'] : '';
  $account = user_load_by_name($account_name);
  if (empty($account)) {
    return;
  }

  // Try to save the node and file.
  if ($file = _drupapp_save_upload('image')) {
    // Build node.
    list($bundle, $image_field_name) = explode('|', variable_get('drupapp_image_field'));
    $node = new stdClass();
    $node->title = $_POST['title'];
    $node->type = $bundle;
    $node->status = variable_get('drupapp_status', FALSE);
    $node->name = $account->name;
    $node->language = LANGUAGE_NONE;
    $node->{$image_field_name}[LANGUAGE_NONE][0] = (array) $file;

    // Save the node.
    node_submit($node);
    node_save($node);
    if ($node->nid) {
      cache_clear_all();
    }
  }
}

/**
 * Function to determine the request type.
 */
function drupapp_request_type() {

  $request_type = isset($_POST['request_type']) ? $_POST['request_type'] : FALSE;

  if (in_array($request_type, array('logout', 'authenticate', 'image_upload'))) {
    return $request_type;
  }

  return FALSE;
}

/**
 * End the drupapp request.
 *
 * @param $message
 *   A string to send back to the application and log to watchdog.
 * @param $result
 *   Whether the request was resultfull or not.
 */
function drupapp_request_end($message, $result) {

  // Ignore devel.
  $GLOBALS['devel_shutdown'] = FALSE;

  // Write session.
  drupal_session_commit();

  // Write watchdog and print result.
  $severity = ($result == 1) ? WATCHDOG_NOTICE : WATCHDOG_WARNING;
  watchdog('drupapp', $message, array(), $severity);

  // Send response back.
  $response = array(
    'result' => (int) $result,
    'message' => $message,
  );

  print drupal_json_encode($response);
  exit();
}

/**
 * drupapp authentication service.
 */
function drupapp_service_authenticate() {

  // We need 2 variables at least.
  if (!isset($_POST['drupapp_username']) || !isset($_POST['drupapp_password'])) {
    return array(
      'message' => t('No username or password supplied.'),
      'result' => FALSE
    );
  }

  // Authenticate.
  if ($uid = user_authenticate($_POST['drupapp_username'], $_POST['drupapp_password'])) {
    global $user;
    $edit = array();
    $user = user_load($uid);
    user_login_finalize($edit);
    return array(
      'message' => t('Authentication succeeded for @user.', array('@user' => $_POST['drupapp_username'])),
      'result' => TRUE
    );
  }

  return array(
    'message' => t('Sorry, unrecognized username or password.'),
    'result' => FALSE
  );
}

/**
 * drupapp logout service.
 */
function drupapp_service_logout() {
  global $user;

  if ($user->uid > 0) {
    $name = $user->name;

    // Invoke user_logout hook.
    module_invoke_all('user_logout', $user);

    // Destroy the current session, and reset $user to the anonymous user.
    session_destroy();

    return array(
      'message' => t('Session closed for @name.', array('@name' => $name)),
      'result' => TRUE
    );
  }
  else {
    return array(
      'message' => t('Session already closed.'),
      'result' => TRUE
    );
  }
}

/**
 * drupapp image upload service.
 */
function drupapp_service_image_upload() {

  // Access.
  if (!user_access('upload images via app')) {
    return array(
      'result' => FALSE,
      'message' => t('You have no permission to upload images.'),
    );
  }

  // Title send through ?
  if (!isset($_POST['title'])) {
    return array(
      'result' => FALSE,
      'message' => t('No title found in request.'),
    );
  }

  // Image send through ?
  if (!isset($_FILES['image']['name'])) {
    return array(
      'result' => FALSE,
      'message' => t('No image found in request.'),
    );
  }

  // Is the drupapp_image_field variable set.
  if (!variable_get('drupapp_image_field')) {
    return array(
      'result' => FALSE,
      'message' => t('No image field set. Configure your Drupal installation.'),
    );
  }

  // Basic checks are ok. Let's move on.
  $result = FALSE;

  // Try to save the node and file.
  if ($file = _drupapp_save_upload('image')) {

    // Build node.
    list($bundle, $image_field_name) = explode('|', variable_get('drupapp_image_field'));
    $node = new stdClass();
    $node->title = $_POST['title'];
    $node->type = $bundle;
    $node->status = variable_get('drupapp_status', FALSE);
    $node->name = $GLOBALS['user']->name;
    $node->language = LANGUAGE_NONE;
    $node->{$image_field_name}[LANGUAGE_NONE][0] = (array) $file;

    // Save the node.
    node_submit($node);
    node_save($node);
    if ($node->nid) {
      $result = TRUE;
      $message = t('Image has been posted.');
      cache_clear_all();
    }
    else {
      $message = t('Error saving new node.');
    }
  }
  else {
    $message = t('Image file could not be saved.');
  }

  return array(
    'result' => $result,
    'message' => $message,
  );
}

/**
 * Helper function to upload an image.
 *
 * @param $image_key
 *   The key in the $_FILES variable to look for
 *   the image.
 */
function _drupapp_save_upload($image_key) {

  $destination = 'drupapp_' . time() . '.jpg';

  // We need to manipulate the $_FILES array so file.inc can handle it.
  $_FILES['files']['name'][$image_key] = $destination;
  $_FILES['files']['error'][$image_key] = $_FILES[$image_key]['error'];
  $_FILES['files']['tmp_name'][$image_key] = $_FILES[$image_key]['tmp_name'];
  $_FILES['files']['size'][$image_key] = $_FILES[$image_key]['size'];

  // Create destination and save the file.
  return file_save_upload($image_key, array(), "public://");
}
